# https://spec.commonmark.org/0.31.2/#backslash-escapes

# https://spec.commonmark.org/0.31.2/#example-12
:test: 2.4 Backslash escapes (Example 12)
:stdin: |
\!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~
:expect: |
<p>!&quot;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~</p>
:run:

# https://spec.commonmark.org/0.31.2/#example-13
:test: 2.4 Backslash escapes (Example 13)
:stdin: |
\	\A\a\ \3\φ\«
:expect: |
<p>\	\A\a\ \3\φ\«</p>
:run:

# https://spec.commonmark.org/0.31.2/#example-14
:test: 2.4 Backslash escapes (Example 14)
:stdin: |
\*not emphasized*
\<br/> not a tag
\[not a link](/foo)
\`not code`
1\. not a list
\* not a list
\# not a heading
\[foo]: /url "not a reference"
\&ouml; not a character entity
:expect: |
<p>*not emphasized*
&lt;br/&gt; not a tag
[not a link](/foo)
`not code`
1. not a list
* not a list
# not a heading
[foo]: /url &quot;not a reference&quot;
&amp;ouml; not a character entity</p>
:run:

# https://spec.commonmark.org/0.31.2/#example-15
:test: 2.4 Backslash escapes (Example 15)
:stdin: |
\\*emphasis*
:expect: |
<p>\<em>emphasis</em></p>
:run:

# https://spec.commonmark.org/0.31.2/#example-16
:test: 2.4 Backslash escapes (Example 16)
:stdin: |
foo\
bar
:expect: |
<p>foo<br />
bar</p>
:run:

# https://spec.commonmark.org/0.31.2/#example-17
:test: 2.4 Backslash escapes (Example 17)
:stdin: |
`` \[\` ``
:expect: |
<p><code>\[\`</code></p>
:run:

# https://spec.commonmark.org/0.31.2/#example-18
:test: 2.4 Backslash escapes (Example 18)
:stdin: |
    \[\]
:expect: |
<pre><code>\[\]
</code></pre>
:run:

# https://spec.commonmark.org/0.31.2/#example-19
:test: 2.4 Backslash escapes (Example 19)
:stdin: |
~~~
\[\]
~~~
:expect: |
<pre><code>\[\]
</code></pre>
:run:

# https://spec.commonmark.org/0.31.2/#example-20
:test: 2.4 Backslash escapes (Example 20)
:stdin: |
<https://example.com?find=\*>
:expect: |
<p><a href="https://example.com?find=%5C*">https://example.com?find=\*</a></p>
:run:

# https://spec.commonmark.org/0.31.2/#example-21
:test: 2.4 Backslash escapes (Example 21)
:stdin: |
<a href="/bar\/)">
:expect: |
<a href="/bar\/)">
:run:

# But they work in all other contexts,
# including URLs and link titles, link references,
# and info strings in fenced code blocks:
# https://spec.commonmark.org/0.31.2/#example-22
:test: 2.4 Backslash escapes (Example 22)
:stdin: |
[foo](/bar\* "ti\*tle")
:expect: |
<p><a href="/bar*" title="ti*tle">foo</a></p>
:run:

# https://spec.commonmark.org/0.31.2/#example-23
:test: 2.4 Backslash escapes (Example 23)
:stdin: |
[foo]

[foo]: /bar\* "ti\*tle"
:expect: |
<p><a href="/bar*" title="ti*tle">foo</a></p>
:run:

# https://spec.commonmark.org/0.31.2/#example-24
:test: 2.4 Backslash escapes (Example 24)
:stdin: |
``` foo\+bar
foo
```
:expect: |
<pre><code class="language-foo+bar">foo
</code></pre>
:run:
